### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


input BooleanFilter {
  equals: Boolean
  not: Boolean
}

"""The provider for the data provided by the data key"""
enum DataKey_Provider {
  """IEX Cloud (see `https://iexcloud.io/`)"""
  IEX_CLOUD
}

"""
A single data key option that can be selected for a stock portfolio header
"""
type DataKeyOption {
  """A unique data key for fetching stock portfolio data"""
  dataKey: String

  """A description of the data that is fetched with this data key"""
  description: String

  """A more normal name. This can be shown to users."""
  name: String

  """The name of the provider"""
  provider: DataKey_Provider
}

scalar DateTime

"""
A field whose value conforms to the standard internet email address format as
specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input LoginLocalUserInput {
  """The user's decrypted password"""
  password: String!

  """The email or username (either) of the user"""
  userIdentifier: String!
}

"""Root mutation type"""
type Mutation implements RequestRoot {
  createOneStockPortfolio(data: StockPortfolioCreateInput!): StockPortfolio!
  deleteOneStockPortfolio(where: StockPortfolioWhereUniqueInput!): StockPortfolio

  """Logins in the user, and returns an expiring access token"""
  loginLocalUser(input: LoginLocalUserInput!): TokenPayload

  """Refreshes the currently logged-in user's access token"""
  refreshAccessToken(input: RefreshAccessTokenInput!): TokenPayload

  """Performs local auth registration (custom username + password)"""
  registerLocalUser(input: RegisterLocalUserInput!): RegisterLocalUserPayload

  """Resends the account verification email to the logged-in user"""
  resendVerifyEmail: ResendVerifyEmailPayload
  updateOneStockPortfolio(data: StockPortfolioUpdateInput!): StockPortfolio!

  """The viewer of this request"""
  viewer: Viewer
}

enum OrderByArg {
  asc
  desc
}

"""Root query type"""
type Query implements RequestRoot {
  """
  Retrieves the list of data key options for a stock portfolio header. All filters are 		OR'ed.
  """
  dataKeyOptions(
    """Filter by dataKey (partial works)"""
    dataKey: String

    """Filter by name (partial works)"""
    name: String

    """Filter by provider (partial works)"""
    provider: String
  ): [DataKeyOption!]!
  stockPortfolio(where: StockPortfolioWhereUniqueInput!): StockPortfolio
  stockPortfolios(after: StockPortfolioWhereUniqueInput, before: StockPortfolioWhereUniqueInput, first: Int, last: Int, orderBy: StockPortfolioOrderByInput, skip: Int, where: StockPortfolioWhereInput): [StockPortfolio!]!

  """The viewer of this request"""
  viewer: Viewer
}

input RefreshAccessTokenInput {
  """The refresh token, that is used to refresh the access token"""
  refreshToken: String!
}

input RegisterLocalUserInput {
  """(Unique) The user's email"""
  email: EmailAddress!

  """The user's decrypted password"""
  password: UserPassword!

  """(Unique) The user's username"""
  username: String!
}

"""The response object from a local register user request"""
type RegisterLocalUserPayload {
  """An error will be described if success is false"""
  error: String

  """Whether the registration successfully created a user or not"""
  success: Boolean!

  """The user object"""
  user: User
}

"""Common properties for Query, Mutation and Subscription types"""
interface RequestRoot {
  """The viewer of this request"""
  viewer: Viewer
}

"""The response object from a resend verify email request"""
type ResendVerifyEmailPayload {
  """Status, on whether the email was successfully resent"""
  success: Boolean!
}

"""StockPortfolio entity. This is what gets shown on the data grid"""
type StockPortfolio {
  createdAt: DateTime!

  """The data that gets resolved based on headers and tickers"""
  data: [JSONObject!]!
  headers(after: StockPortfolioHeaderWhereUniqueInput, before: StockPortfolioHeaderWhereUniqueInput, first: Int, last: Int, skip: Int): [StockPortfolioHeader!]!
  id: String!
  name: String!
  tickers: [String!]!
  updatedAt: DateTime!
  user: User!
}

input StockPortfolioCreateInput {
  name: String!
}

"""A column configuration for the stock portfolio on the data grid"""
type StockPortfolioHeader {
  dataKey: String!
  frozen: Boolean!
  name: String!
  resizable: Boolean!
  width: Int!
}

input StockPortfolioHeaderFilter {
  every: StockPortfolioHeaderWhereInput
  none: StockPortfolioHeaderWhereInput
  some: StockPortfolioHeaderWhereInput
}

input StockPortfolioHeaderInput {
  dataKey: String!
  frozen: Boolean!
  name: String!
  resizable: Boolean!
  width: Int!
}

input StockPortfolioHeaderWhereInput {
  AND: [StockPortfolioHeaderWhereInput!]
  dataKey: StringFilter
  frozen: BooleanFilter
  id: UUIDFilter
  name: StringFilter
  NOT: [StockPortfolioHeaderWhereInput!]
  OR: [StockPortfolioHeaderWhereInput!]
  resizable: BooleanFilter
  stockPortfolio: StockPortfolioWhereInput
  width: IntFilter
}

input StockPortfolioHeaderWhereUniqueInput {
  id: String
}

input StockPortfolioOrderByInput {
  id: OrderByArg
  name: OrderByArg
}

input StockPortfolioUpdateInput {
  headers: [StockPortfolioHeaderInput!]
  id: ID!
  name: String
  tickers: [String!]
}

input StockPortfolioWhereInput {
  AND: [StockPortfolioWhereInput!]
  headers: StockPortfolioHeaderFilter
  id: UUIDFilter
  name: StringFilter
  NOT: [StockPortfolioWhereInput!]
  OR: [StockPortfolioWhereInput!]
}

input StockPortfolioWhereUniqueInput {
  id: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

"""The response from a successful login or token refresh request"""
type TokenPayload {
  """JSON web token to refresh the token"""
  refreshToken: String!

  """JSON web token to authenticate API requests"""
  token: String!
}

"""Basic user of the application"""
type User {
  createdAt: DateTime!

  """The user's email"""
  email: EmailAddress
  emailVerified: Boolean!
  id: String!
  updatedAt: DateTime!
  username: String!
}

"""The plain-text password of a user to be hashed"""
scalar UserPassword

scalar UUID

input UUIDFilter {
  contains: UUID
  endsWith: UUID
  equals: UUID
  gt: UUID
  gte: UUID
  in: [UUID!]
  lt: UUID
  lte: UUID
  not: UUID
  notIn: [UUID!]
  startsWith: UUID
}

"""The viewer of this request"""
type Viewer {
  """The viewer's email"""
  email: String!

  """Whether this viewer verified their email address"""
  emailVerified: Boolean!

  """The viewer's id"""
  id: ID!

  """The viewer's username"""
  username: String!
}
