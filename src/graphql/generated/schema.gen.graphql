### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


input BooleanFilter {
  equals: Boolean
  not: Boolean
}

input CreateStockPortfolioInput {
  """(Unique) The name of this stock portfolio."""
  name: String = "New_Portfolio"
}

type CreateStockPortfolioPayload {
  stockPortfolio: StockPortfolio!
}

"""Pagination cursor. Use this to fetch items before or after an item"""
scalar Cursor

"""
The dataKey property of a stock portfolio header, that determines what data is pulled
"""
enum DataKey {
  IEX_COMPANY__CEO
  IEX_COMPANY__COMPANY_NAME
  IEX_COMPANY__DESCRIPTION
  IEX_COMPANY__EMPLOYEES
  IEX_COMPANY__EXCHANGE
  IEX_COMPANY__INDUSTRY
  IEX_COMPANY__ISSUE_TYPE
  IEX_COMPANY__SECTOR
  IEX_COMPANY__SECURITY_NAME
  IEX_COMPANY__SYMBOL
  IEX_COMPANY__TAGS
  IEX_COMPANY__WEBSITE
  IEX_KEY_STATS__AVG_10_VOLUME
  IEX_KEY_STATS__AVG_30_VOLUME
  IEX_KEY_STATS__BETA
  IEX_KEY_STATS__COMPANY_NAME
  IEX_KEY_STATS__DAY_200_MOVINGAVG
  IEX_KEY_STATS__DAY_30_CHANGE_PERCENT
  IEX_KEY_STATS__DAY_5_CHANGE_PERCENT
  IEX_KEY_STATS__DAY_50_MOVINGAVG
  IEX_KEY_STATS__DIVIDEND_YIELD
  IEX_KEY_STATS__EMPLOYEES
  IEX_KEY_STATS__EX_DIVIDEND_DATE
  IEX_KEY_STATS__FLOAT
  IEX_KEY_STATS__MARKET_CAP
  IEX_KEY_STATS__MAX_CHANGE_PERCENT
  IEX_KEY_STATS__MONTH_1_CHANGE_PERCENT
  IEX_KEY_STATS__MONTH_3_CHANGE_PERCENT
  IEX_KEY_STATS__MONTH_6_CHANGE_PERCENT
  IEX_KEY_STATS__NEXT_DIVIDEND_DATE
  IEX_KEY_STATS__NEXT_EARNINGS_DATE
  IEX_KEY_STATS__PE_RATIO
  IEX_KEY_STATS__SHARES_OUTSTANDING
  IEX_KEY_STATS__SYMBOL
  IEX_KEY_STATS__TTM_DIVIDEND_RATE
  IEX_KEY_STATS__TTM_EPS
  IEX_KEY_STATS__WEEK_52_CHANGE
  IEX_KEY_STATS__WEEK_52_HIGH
  IEX_KEY_STATS__WEEK_52_LOW
  IEX_KEY_STATS__YEAR_1_CHANGE_PERCENT
  IEX_KEY_STATS__YEAR_2_CHANGE_PERCENT
  IEX_KEY_STATS__YEAR_5_CHANGE_PERCENT
  IEX_KEY_STATS__YTD_CHANGE_PERCENT
  IEX_PREVIOUS_DAY_PRICE__CHANGE
  IEX_PREVIOUS_DAY_PRICE__CHANGE_PERCENT
  IEX_PREVIOUS_DAY_PRICE__CLOSE
  IEX_PREVIOUS_DAY_PRICE__DATE
  IEX_PREVIOUS_DAY_PRICE__HIGH
  IEX_PREVIOUS_DAY_PRICE__LOW
  IEX_PREVIOUS_DAY_PRICE__OPEN
  IEX_PREVIOUS_DAY_PRICE__SYMBOL
  IEX_PREVIOUS_DAY_PRICE__UNADJUSTED_VOLUME
  IEX_PREVIOUS_DAY_PRICE__VOLUME
  IEX_QUOTE__AVG_TOTAL_VOLUME
  IEX_QUOTE__CALCULATION_PRICE
  IEX_QUOTE__CHANGE
  IEX_QUOTE__CHANGE_PERCENT
  IEX_QUOTE__CLOSE
  IEX_QUOTE__CLOSE_TIME
  IEX_QUOTE__COMPANY_NAME
  IEX_QUOTE__DELAYED_PRICE
  IEX_QUOTE__DELAYED_PRICE_TIME
  IEX_QUOTE__EXTENDED_CHANGE
  IEX_QUOTE__EXTENDED_CHANGE_PERCENT
  IEX_QUOTE__EXTENDED_PRICE
  IEX_QUOTE__EXTENDED_PRICE_TIME
  IEX_QUOTE__HIGH
  IEX_QUOTE__IEX_ASK_PRICE
  IEX_QUOTE__IEX_ASK_SIZE
  IEX_QUOTE__IEX_BID_PRICE
  IEX_QUOTE__IEX_BID_SIZE
  IEX_QUOTE__IEX_LAST_UPDATED
  IEX_QUOTE__IEX_MARKET_PERCENT
  IEX_QUOTE__IEX_REAL_TIME_PRICE
  IEX_QUOTE__IEX_REAL_TIME_SIZE
  IEX_QUOTE__IEX_VOLUME
  IEX_QUOTE__LATEST_PRICE
  IEX_QUOTE__LATEST_SOURCE
  IEX_QUOTE__LATEST_TIME
  IEX_QUOTE__LATEST_UPDATE
  IEX_QUOTE__LATEST_VOLUME
  IEX_QUOTE__LOW
  IEX_QUOTE__MARKET_CAP
  IEX_QUOTE__OPEN
  IEX_QUOTE__OPEN_TIME
  IEX_QUOTE__PREVIOUS_CLOSE
  IEX_QUOTE__SYMBOL
  IEX_QUOTE__WEEK_52_HIGH
  IEX_QUOTE__WEEK_52_LOW
  IEX_QUOTE__YTD_CHANGE
}

"""The provider for the data provided by the data key"""
enum DataKey_Provider {
  """IEX Cloud (see `https://iexcloud.io/`)"""
  IEX_CLOUD
}

"""
A single data key option that can be selected for a stock portfolio header
"""
type DataKeyOption {
  """A unique data key for fetching stock portfolio data"""
  dataKey: DataKey

  """A description of the data that is fetched with this data key"""
  description: String

  """A more normal name. This can be shown to users."""
  name: String

  """The name of the provider"""
  provider: DataKey_Provider
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

"""Search items based on date-time property"""
input DateTimeInput {
  """Date: DD in (MM/DD/YYYY), indexed from 1"""
  day: Int

  """Hours of the day (can be 0-23)"""
  hours: Int

  """Milliseconds of the second (can be from 0-999)"""
  milliseconds: Int

  """Minutes of the hour (can be 0-59)"""
  minutes: Int

  """Date: MM in (MM/DD/YYYY), indexed from 1"""
  month: Int

  """Seconds of the minute (can be 0-59)"""
  seconds: Int

  """Date: YYYY in (MM/DD/YYYY), indexed from 1"""
  year: Int!
}

input DeleteStockPortfolioInput {
  """Id of the stock portfolio to delete"""
  id: ID!
}

type DeleteStockPortfolioPayload {
  stockPortfolio: StockPortfolio!
}

"""
A field whose value conforms to the standard internet email address format as
specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input LoginLocalUserInput {
  """The user's decrypted password"""
  password: String!

  """The email or username (either) of the user"""
  userIdentifier: String!
}

"""Root mutation type"""
type Mutation implements RequestRoot {
  createStockPortfolio(input: CreateStockPortfolioInput!): CreateStockPortfolioPayload
  deleteStockPortfolio(input: DeleteStockPortfolioInput!): DeleteStockPortfolioPayload

  """Logins in the user, and returns an expiring access token"""
  loginLocalUser(input: LoginLocalUserInput!): TokenPayload

  """Refreshes the currently logged-in user's access token"""
  refreshAccessToken(input: RefreshAccessTokenInput!): TokenPayload

  """Performs local auth registration (custom username + password)"""
  registerLocalUser(input: RegisterLocalUserInput!): RegisterLocalUserPayload

  """Resends the account verification email to the logged-in user"""
  resendVerifyEmail: ResendVerifyEmailPayload
  updateStockPortfolio(input: UpdateStockPortfolioInput!): UpdateStockPortfolioPayload

  """The viewer of this request"""
  viewer: Viewer
}

enum OrderByArg {
  asc
  desc
}

"""Root query type"""
type Query implements RequestRoot {
  """
  Retrieves the list of data key options for a stock portfolio header. All filters are 		OR'ed.
  """
  dataKeyOptions(
    """Filter by dataKey (partial works)"""
    dataKey: String

    """Filter by name (partial works)"""
    name: String

    """Filter by provider (partial works)"""
    provider: String
  ): [DataKeyOption!]!
  stockPortfolios(after: StockPortfolioWhereUniqueInput, before: StockPortfolioWhereUniqueInput, first: Int, last: Int, orderBy: StockPortfolioOrderByInput, skip: Int, where: StockPortfolioWhereInput): [StockPortfolio!]!

  """The viewer of this request"""
  viewer: Viewer
}

input RefreshAccessTokenInput {
  """The refresh token, that is used to refresh the access token"""
  refreshToken: String!
}

input RegisterLocalUserInput {
  """(Unique) The user's email"""
  email: EmailAddress!

  """The user's decrypted password"""
  password: UserPassword!

  """(Unique) The user's username"""
  username: String!
}

"""The response object from a local register user request"""
type RegisterLocalUserPayload {
  """An error will be described if success is false"""
  error: String

  """Whether the registration successfully created a user or not"""
  success: Boolean!

  """The user object"""
  user: User
}

"""Common properties for Query, Mutation and Subscription types"""
interface RequestRoot {
  """The viewer of this request"""
  viewer: Viewer
}

"""The response object from a resend verify email request"""
type ResendVerifyEmailPayload {
  """Status, on whether the email was successfully resent"""
  success: Boolean!
}

"""StockPortfolio entity. This is what gets shown on the data grid"""
type StockPortfolio {
  createdAt: DateTime!

  """The data that gets resolved based on headers and tickers"""
  data: [JSONObject!]!
  headers(after: StockPortfolioHeaderWhereUniqueInput, before: StockPortfolioHeaderWhereUniqueInput, first: Int, last: Int, skip: Int): [StockPortfolioHeader!]!
  id: String!
  name: String!
  tickers: [String!]!
  updatedAt: DateTime!
  user: User!
}

input StockPortfolioFilter {
  every: StockPortfolioWhereInput
  none: StockPortfolioWhereInput
  some: StockPortfolioWhereInput
}

"""A column configuration for the stock portfolio on the data grid"""
type StockPortfolioHeader {
  dataKey: String!
  frozen: Boolean!
  name: String!
  resizable: Boolean!
  width: Int!
}

input StockPortfolioHeaderFilter {
  every: StockPortfolioHeaderWhereInput
  none: StockPortfolioHeaderWhereInput
  some: StockPortfolioHeaderWhereInput
}

input StockPortfolioHeaderInput {
  dataKey: String!
  name: String!
  tickers: [String!]!
  width: Int!
}

input StockPortfolioHeaderWhereInput {
  AND: [StockPortfolioHeaderWhereInput!]
  dataKey: StringFilter
  frozen: BooleanFilter
  id: UUIDFilter
  name: StringFilter
  NOT: [StockPortfolioHeaderWhereInput!]
  OR: [StockPortfolioHeaderWhereInput!]
  resizable: BooleanFilter
  stockPortfolio: StockPortfolioWhereInput
  width: IntFilter
}

input StockPortfolioHeaderWhereUniqueInput {
  id: String
}

input StockPortfolioOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  name: OrderByArg
  updatedAt: OrderByArg
}

input StockPortfolioWhereInput {
  AND: [StockPortfolioWhereInput!]
  createdAt: DateTimeFilter
  headers: StockPortfolioHeaderFilter
  id: UUIDFilter
  name: StringFilter
  NOT: [StockPortfolioWhereInput!]
  OR: [StockPortfolioWhereInput!]
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input StockPortfolioWhereUniqueInput {
  id: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

"""The response from a successful login or token refresh request"""
type TokenPayload {
  """JSON web token to refresh the token"""
  refreshToken: String!

  """JSON web token to authenticate API requests"""
  token: String!
}

input UpdateStockPortfolioInput {
  """Headers for this data grid, including how data is resolved"""
  headers: [StockPortfolioHeaderInput!]

  """The ID of the stock portfolio to update"""
  id: ID!

  """The tickers that are the rows for this data grid"""
  tickers: [String!]
}

type UpdateStockPortfolioPayload {
  stockPortfolio: StockPortfolio!
}

"""Basic user of the application"""
type User {
  createdAt: DateTime!

  """The user's email"""
  email: EmailAddress
  emailVerified: Boolean!
  id: String!
  updatedAt: DateTime!
  username: String!
}

"""The plain-text password of a user to be hashed"""
scalar UserPassword

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  emailVerified: BooleanFilter
  id: UUIDFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  stockPortfolios: StockPortfolioFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

scalar UUID

input UUIDFilter {
  contains: UUID
  endsWith: UUID
  equals: UUID
  gt: UUID
  gte: UUID
  in: [UUID!]
  lt: UUID
  lte: UUID
  not: UUID
  notIn: [UUID!]
  startsWith: UUID
}

"""Search items based on a range, or fuzzy date"""
input VariableDateTimeInput {
  """
  Returns items such that this property comes after the specified date-time
  """
  after: DateTimeInput

  """
  Returns items such that this property comes before the specified date-time
  """
  before: DateTimeInput

  """
  Returns items such that this property's date-time contains exactly the fields as 				specifed
  """
  equal: DateTimeInput
}

"""The viewer of this request"""
type Viewer {
  """The viewer's email"""
  email: String

  """Whether this viewer verified their email address"""
  emailVerified: Boolean

  """The viewer's id"""
  id: ID

  """The viewer's username"""
  username: String
}
